(in-package :clpy)

(defclass py-object ()
  ((py-object :initarg :value
              :initform nil
              :reader py-object)))

(defgeneric ob-refcnt (p)
  (:documentation "Return ob_refcnt of the PyObject."))
(defmethod ob-refcnt ((p py-object))
  (c-val ((o clpy.ffi:object (py-object p)))
    (cffi:convert-from-foreign (o :ob-refcnt) :long)))

(defgeneric ob-type (p)
  (:documentation "Return ob_type of the PyObject."))
(defmethod ob-type ((o py-object))
  (c-val ((o clpy.ffi:object (py-object p)))
    (make-instance 'py-object :value (o :ob-type))))

(defgeneric ascii (p)
  (:documentation "Compute a string representation of object o"))
(defmethod ascii ((p py-object))
  (c-val ((o clpy.ffi:object (py-object p)))
    (make-instance 'py-object :value (clpy.ffi.fns:object-ascii o))))

(defgeneric as-char-buffer (p))
(defmethod as-char-buffer ((p py-object))
  (c-val ((o clpy.ffi:object (py-object p)))
    (let ((buffer (make-instance 'cffi:foreign-pointer)))
      (c-with ((buffer-len clpy.ffi:ssize-t))
        (when (minusp (clpy.ffi.fns:object-as-char-buffer o buffer (buffer-len &)))
          (error 'py-type-error))
        (values buffer buffer-len)))))

(defgeneric as-file-descriptor (p)
  (:documentation "Return the file descriptor associated with p as an int."))
(defmethod as-file-descriptor ((p py-object))
  (c-val ((o clpy.ffi:object p))
    (cffi:convert-from-foreign
     (clpy.ffi.fns:object-as-file-descriptor o)
     :int)))

(defgeneric as-read-buffer (p))
(defmethod as-write-buffer ((p py-object))
  (c-val ((o clpy.ffi:object (py-object p)))
    (let ((buffer (make-instance 'cffi:foreign-pointer)))
      (c-with ((buffer-len clpy.ffi:ssize-t))
        (when (minusp (clpy.ffi.fns:object-as-write-buffer o buffer (buffer-len &)))
          (error 'py-type-error))
        (values buffer buffer-len)))))

(defgeneric bytes (o)
  (:documentation "Compute a bytes representation of object o"))
(defmethod bytes ((o py-object))
  (c-val ((o clpy.ffi:object o))
    (let ((result (clpy.ffi.fns:object-bytes o)))
      (when (cffi:null-pointer-p (autowrap:ptr result))
        (error 'py-type-error))
      result)))

(defgeneric call (callable args kwargs)
  (:documentation "Call a callable Python object callable."))
(defmethod call ((callable py-object) (args py-object) (kwargs py-object))
  (c-val ((o-callable clpy.ffi:object (py-object callable))
          (o-args clpy.ffi:object (py-object args))
          (o-kwargs clpy.ffi:object (py-object kwargs)))
    (let ((result (clpy.ffi.fns:object-call o-callable o-args o-kwargs)))
      (when (cffi:null-pointer-p result)
        (error 'py-exception))
      result)))

(defgeneric call-function (callable format &rest args)
  (:documentation "Call a callable Python object callable"))
(defmethod call-function ((callable py-object) (format string) &rest args)
  (c-val ((o-callable clpy.ffi:object (py-object callable)))
    (let ((result (funcall #'clpy.ffi.fns:object-call-function
                           o-callable o-args args)))
      (when (cffi:null-pointer-p result)
        (error 'py-exception))
      result)))

(defgeneric call-function-obj-args (callable &rest args)
  (:documentation "Call a callable Python object callable"))
(defmethod call-function-obj-args ((callable py-object) &rest args)
  (c-val ((o-callable clpy.ffi:object (py-object callable)))
    (let ((result (funcall #'clpy.ffi.fns:object-call-function-obj-args
                           o-callable args cffi:null-pointer)))
      (when (cffi:null-pointer-p result)
        (error 'py-exception))
      result)))
